#正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：

>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
本来是要俩个分组的，\d+直接贪婪匹配，0*就没的匹配了，就空了

？：0或1个字符
加个？就能非贪婪匹配，尽可能少匹配
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')
